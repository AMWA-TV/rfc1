#%RAML 0.8
title: AS-02 REST API
version: 0.1
baseUri: http://{server}/{api}/
protocols: [ HTTP, HTTPS ]
baseUriParameters:
  server:
    description: DNS address or IP address of the service.
    type: string
  api:
    description: Configurable API name.
    type: string
mediaType: application/xml
documentation:
  - title: Overview
    content: |
      The _AS-02 RESTful API_ provides a means to manage a collection
      of AS-02 bundles as they change and grow, whilst hiding some of 
      the details of the underlying implementation, e.g. file system or
      MXF files. The API is expected to be associated with a specific
      _store_, such as a folder on a file system or a bucket of objects 
      on an object store. 
resourceTypes:
  - file:
      usage: Represents a plain file.
      description: Represents a file of name <<resourcePathName>> in a parent folder called <<parent>>.
      get:
      post:
      put:
      delete:
  - mxffile:
      usage: Represents an MXF file.
      description: |
        Resource representing an MXF file and providing access to details about the file, it's raw stream, 
        an XML serialisation of it's header as XML or it's descriptor as XML.
      /{filename}:
        type: 
      /{filename}/stream:
        type:
      /{filename}/aaf-xml:
        type:
      /{filename}/aaf-xml/descriptor:
        type:
      
traits:
  - paged:
      queryParameters:
        skip:
          type: integer
          minimum: 0
          description: Number of pages of <<resourcePathName>> items to skip (hide) before starting to display values.
          required: false
          default: 0
        limit:
          type: integer
          minimum: 0
          description: Limit of the mixumum number of <<resourcePathName>> items to include on each page.
          required: false
          default: 20
        detail:
          type: string
          enum: [ full, summary, link ]
          description: |
            Amount of detail to return for each <<resourcePathName>> items in the collection, where:
            
            * _full_: Complete manifest details for each item.
            * _summary_: Some useful details about each bundle, including its name, identifier, creator and 
            number of files.
            * _link_: A list of identifiers for bundles.
          required: false
          default: full
  - optionalCreationID:
      queryParameters:
        id:
          type: string
          pattern: "(urn:uuid:)?[0-9a-fA-f]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          required: false
          description: |
            An unique identifier for a new resource provided prior to its creation. The service will either:
          
            * proceed to try to create a resource with the given identifier, or
            * respond with a bad request status.
          
            This is an optional parameter of type [UUID](http://tools.ietf.org/html/rfc4122). If no id is provided, 
            the service will generate a type 4 pseudo-random UUID to identify the resource.  
  - as02FileList:
      responses:
        200:
          body:
            application/xml:
              schema: |
                <xs:schema attributeFormDefault="unqualified"
                     elementFormDefault="qualified"
                     xmlns:xs="http://www.w3.org/2001/XMLSchema"
                     xmlns:as02="http://www.amwa.tv/as-02/1.0/manifest"
                     xmlns:atom="http://www.w3.org/2005/Atom"
                     targetNamespace="http://www.quantel.com/qstack/rasotwo">
                  <import namespace="http://www.amwa.tv/as-02/1.0/manifest/" schemaLocation="AS-02Manifest.xsd"/>
                  <xs:element name="Files">
                    <xs:complexType>
                      <xs:choice>
                        <xs:element name="File" type="as02:FileType" minOccurs="0" maxOccurs="unbounded"/> <!-- for full listings-->
                        <xs:element name="FileSummary"  minOccurs="0" maxOccurs="unbounded"> <!-- for summary listings-->
                          <xs:element name="FileName" type="xs:string" minOccurs="1" maxOccurs="1"/> <!-- last part of path name -->
                          <xs:element name="Path" type="xs:anyURI" minOccurs="1" maxOccurs="1"/> <!-- Q note: namespace issue in implementation -->
                          <xs:element name="Role" type="as02:FileRole" minOccurs="1" maxOccurs="1"/>
                          <xs:element name="FileID" type="as02:UUID" minOccits="1" maxOccurs="1"/> <!-- contraining to UUIDs only --> 
                        </xs:element>
                        <xs:element ref="atom:link" minOccurs="0" maxOccurs="unbounded"/> <!-- for link only listings-->
                      <xs:choice>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
  - as02fileDetails:
      responses:
        200:
          body:
            application/xml:
              schema: |
                 <xs:schema attributeFormDefault="unqualified"
                     elementFormDefault="qualified"
                     xmlns:xs="http://www.w3.org/2001/XMLSchema"
                     xmlns:as02="http://www.amwa.tv/as-02/1.0/manifest"
                     targetNamespace="http://www.quantel.com/qstack/rasotwo">
                   <import namespace="http://www.amwa.tv/as-02/1.0/manifest/" schemaLocation="AS-02Manifest.xsd"/>
                   <xs:element name="File" type="as02:FileType" minOccurs="1" maxOccurs="1"/>
                 </xs:schema>                
  - as02fileCreated:
      responses:
        201:
          body:
            application/xml:
              schema: |
                 <xs:schema attributeFormDefault="unqualified"
                     elementFormDefault="qualified"
                     xmlns:xs="http://www.w3.org/2001/XMLSchema"
                     xmlns:as02="http://www.amwa.tv/as-02/1.0/manifest"
                     targetNamespace="http://www.quantel.com/qstack/rasotwo">
                   <import namespace="http://www.amwa.tv/as-02/1.0/manifest/" schemaLocation="AS-02Manifest.xsd"/>
                   <xs:element name="File" type="as02:FileType" minOccurs="1" maxOccurs="1"/>
                 </xs:schema>                
          headers: 
            Location: 
              description: Full URL path to the newly created file, which includes the bundle ID and file ID. 
                         
  - resourceNotFound:
      responses:
        404:
          application/xml:
            description: The resource could not be found on this store.
            schema: !include error.xsd
    
         
/bundle:
  displayName: Bundle Collection
  description: Provides access to all bundles stored in this collection. 
  get:
    is: paged
    description: Retrieve a paged list of all stored bundles.
    responses:
      200:
        body:
          application/xml:
            schema: |
              <xs:schema attributeFormDefault="unqualified"
                     elementFormDefault="qualified"
                     xmlns:xs="http://www.w3.org/2001/XMLSchema"
                     xmlns:as02="http://www.amwa.tv/as-02/1.0/manifest"
                     xmlns:atom="http://www.w3.org/2005/Atom"
                     targetNamespace="http://www.quantel.com/qstack/rasotwo">
                <import namespace="http://www.amwa.tv/as-02/1.0/manifest/" schemaLocation="AS-02Manifest.xsd"/>
                <xs:element name="Bundles">
                  <xs:complexType>
                    <xs:choice>
                      <xs:element ref="as02:Manifest" minOccurs="0" maxOccurs="unbounded"/> <!-- for full listings-->
                      <xs:element name="BundleSummary" minOccurs="0" maxOccurs="unbounded"> <!-- for summary listings-->
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="BundleName" minOccurs="1" maxOccurs="1" type="xs:string"/> <!-- Q note: implementation issue - elements in as02 namespace -->
                            <xs:element name="BundleID" minOccurs="1" maxOccurs="1" type="as02:UUID"/>
                            <xs:element name="FileCount" minOccurs="1" maxOccuts="1" type="xs:integer"/>
                           </xs:sequence>
                        </xs:complexType>
                      </xs:element>
                      <xs:element ref="atom:link" minOccurs="0" maxOccurs="unbounded"/> <!-- for link only listings-->
                    <xs:choice>
                  </xs:complexType>
                </xs:element>
              </xs:schema>
  post:
    is: optionalCreationID
    description: |
      Create a new _empty bundle_. An _empty bundle_ is a bundle with an empty _media_ folder and an empty 
      _extra_ folder. 
      
      The bundle must have a unique identifier (`BundleID`) and name (`BundleName`) on this store. The
      creation date (`CreationDate`) property for the bundle will be automatically set to current system
      time. Annotations (`AnnotationText`) in the bundle will be an initially empty list.
    queryParameters:
      name: 
        type: string
        description: |
          A unique name for this bundle on this store. If no name is provided, one will be automatically generated.
          The name is stored in the bundle's manifest file as element `BundleName`.
        required: false
      creator: 
        type: string
        description: |
          Bundle creator property, stored in `Creator` property of the bundle manifest file. If no creator is
          provided, a name for the local service may be used.
        required: false
    responses:
      201:
        body:
          application/xml:
            schema: !include AS-02Manifest.xsd
            headers: 
              Location: 
                description: Full URL path to the newly created bundle, which includes the bundle ID. 
      400:
        body:
          application/xml:
            description: Problem with the given parameters.
            schema: !include error.xsd         
  /{bundleID}:
    displayName: Specific Bundle Details
    is: resourceNotFound
    description: |
      Interact with a specific bundle and its sub-resources. <<bundleID>> may be a bundle name that matches the
      `BundleName` value in a bundle manifest file or a UUID bundle identifier matching the `BundleID` property.
      get:
        description: Retrieve full details of the identified bundle.
        responses:
          200:
            application/xml:
              schema: !include AS-02Manifest.xsd            
      delete:
        description: Delete the specified bundle. The bundle will no longer appear in the list of bundles.
        response:
          200:
            description: The bundle has been deleted successfully.
      post:
        description: |
          Update the identified bundle's details. 
          
          Note that the update of the bundle's name is not supported because
          some bundle store implementations use the bundle name as a folder name on disk.
        queryParameters:
          creator: 
            type: string
            description: |
              Bundle creator property, stored in `Creator` property of the bundle manifest file. If no creator is
              provided, the existing creator name will remain.
            required: false
          annotation:
            type: string
            repeat: true
            description: |
              List of annotations to add to the current annotations set for the bundle, stored as a sequence of 
              `AnnotationText` elements in the bundle manifest file.
              
              This API does not support the editing or removal of annotations.
            required: false          
        responses:
          200:
            application/xml:
              description: Successful update of the properties.
              schema: !include AS-02Manifest.xsd
          400:
            application/xml:
              description: Problem with the property values provided.
              schema: !include error.xsd                 
    /media:
      displayName: Essence Component Collection
      is: resourceNotFound
      description: Access to all essence component files in the AS-02 bundle.
      get:
        is: [paged, as02FileList]
        description: List details of all essence components in the bundle.
      post:
        is: [optionalCreationID, as02FileCreated]
        description: |
          Create a new empty essence component in the bundle using the given Reg-XML file descriptor.
          
          The body of the POST shall contain a valid serialization of a class that is the extension of 
          an AAF FileDescriptor class.
        queryParameters:
          rushID: 
            description: |
              Identifier of a source package to set at the end of the source reference chain. If not set, one 
              will be auto-generated.
              
              The purpose of defining a source package at the end of the reference chain is to provide a common
              source identifier for essence components that:
              
              * provide partial representations of the same source material, possibly consisting of overlapping 
              subclips;
              * provide different qualities of rendition of the same source material.
            type: string
            pattern: "(urn:uuid:)?[0-9a-fA-f]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
            required: false
          trackIndex:
            description: |
              Non-negative integer number to identify the track (video) or group of tracks (audio) as essence component 
              file names within the bundle, e.g. video0.mxf, audio3.mxf. 
            type: integer
            minimum: 0
            default: 0
            required: false
          firstDecodeUnit:
            description: |
              Index or decode time stamp (DTS) for the first expected access unit to be stored. As the access unit service 
              can receive units out-of-order within a few playable seconds, it requires a starting window in which to expect 
              the first unit. 
            type: integer
            default: 0
            required: false
          origin:
            description: |
              A value measured in edit units for the offset from zero of an item of content, used to define the relationship
              between the primary file package and the source package at the end of the source reference chain. THe value is a count 
              of the number essence units missing after the zero point of the rush source material. More than one essence component 
              for the same rushID can be stored in this or other bundles and each may have different extent.
            type: integer
            default: 0
          offset:
            description: |
              A slight nudge left or right required to align - often for reasons of lip sync.- related essence components. When creating 
              a version file, one component, typically the video component, is nominated as the master component. The master component 
              should have an offset value of zero, which is the default value for this query parameter. The audio component may have an 
              offset value, measured in the sample rate of the audio, representing a slight offset that is required to synchronize the 
              audio decoder with the video decoder. The opposite of MXF's Origin, this is a count of the number of missing samples that 
              exist after the zero point. This will often be a negative value to ensure that the audio decoding can start prior to the 
              presentation of the frame.
              
              Note that a timecode track in an audio essece component file is aligned with the origin, not with the offset.
            type: integer
            default: 0
            required: false
          startTimecode:
            description: |
              Timecode value to set for the first access unit. This value is set to a default of the zero timecode (00:00:00:00 or 
              00:00:00;00) if no value is provided. The value is overridden if timecode if provided per access unit or range of access units. 
              Note that for audio tracks where the timecode is video frame rate based, the origin is applied but an offset of 0 is set 
              for the timecode track. The timecode value is as specified in SMPTE ST0258 "Transfer of Edit Decision Lists", e.g. 01:02:03:04 
              for non-drop-frame and 01:02:03;04 for drop frame.
            type: string
            pattern: "[0-2][0-9]:[0-5][0-9]:[0-5][0-9][:;][0-2][0-9](\\.[01])?"
            default: 00:00:00:00
            required: false
          is90000Hz:
            description: |
              Set to true to indicate that the access units will be posted with decode and/or presentation timestamps measured as per MPEG-2 
              transport streams, at 90000Hz. The service should be able to cope with some jitter in this casd. If access units are to be 
              sent based on a continuous, index-based counter, set the value to its default of `false`. 
            type: boolean
            default: false
            required: false
          samplesPerAccessUnit:
            description: |
              Number of samples per access unit as received, which is typically the default value of 1 for video. Other common values are 
              1024 for AAC audio and 192 for AES audio in a transport stream (SMPTE 0302). Note that this is not necessarily the value as 
              stored in the MXF essence component, as in the case of AES audio is stored as clip-wrapped 48kHz PCM samples in MXF files.
              
              A known problem of this approach does not allow for variable numbers of samples per frame. To work with PCM audio at 30000/1001 or
              60000/1001 frame rates, set to 8008 and compine PCM samples into five frame groups.
            type: integer
            minimum: 1
            default: 1
            required: false
        body:
          application/xml:
            description: |
              A Reg-XML (SMPTE 2001-1-2013) representation of an AAF/MXF File Descriptor.
              
              * For video data, this will be an exension of `PictureDescriptor`.
              * For audio data, this will be a `SoundDescriptor` or one of its extensions.
              * For ancilliary data, such as captions, this will an extension of `DataEssenceDescriptor`.
              
              Certain properties of the descriptor will be used by the AS-02 API to determine aspects of the 
              essence component to be created, such as index type (clip or frame wrapped), index edit rate etc..
            schema: !include ST2001-2b-2014.xsd
        responses:
          400:
            body:
              application/xml:
                description: |
                  Problem creating the essence compomponent for reasons including:
                  
                  * Invalid query parameters;
                  * Conflicts with existing identifiers;
                  * Problem parsing the given file descriptor.
                schema: !include error.xsd     
      /{mediaID}:
        displayName: Specific Essence Component Details
        description: Access to a specific essence component.
        get: 
          is: as02FileDetails
          description: Retrieve details about a specific essence component.
        
        /accessunit:
          displayName: Access Unit Information
          /{accessUnitID}:
            displauName: Access Unit Data
        /gop:
        displayName: GOP Information
        description:
        /{gopID}:
          displayName: GOP Data
          description:
      /index:
        displayName: Index Information
        description:
        /{indexID}:
          displayName: Index Data
          description:
      /timecode:
        displayName: Timecode Information
        description:
        /{timecodeID}:
          displayName: Timecode Data
          description:
      /partition:
        displayName: Partition Information
        description:
        /{partitionID}:
          displayName: Partition Data
          description:
      /close:
    /extra:
      displayName: Extra Folder Contents
      description: Access to vendor sub-folders of the AS-02 bundle's extra folder.
      get:
        is: paged
        description: Retrieve a list of 
    
      /{vendorName}:
        description: Represents a specific vendor subfolder of <<vendorName>> within the AS-02 bundle.
        /{fileName}:
          type: "{ file: { parent: <<vendor>> } }"
        /{sf1}/{fileName}
          type: "{ file: { parent: <<vendor>>/{sf1}/ } }"
        /{sf1}/{sf2}/{fileName}
          type: "{ file: { parent: "<<vendor>>/{sf1}/{sf2}/" }}"
        /{sf1}/{sf2}/{sf3}/{fileName}
          type: "{ file: { parent: "<<vendor>>/{sf1}/{sf2}/{sf3}/" }}"
        get:
          is: paged
        
      post:
      delete:
  /version:
    displayName: Version File Collection
      is: resourceNotFound
      description: Access to all version files in the AS-02 bundle.
      get:
        is: [paged, as02FileList]
        description: List details of all version files in the bundle.
      post:
        is: [optionalCreationID, as02FileCreated]
        queryParameters:
          name:
            description: |
              Name for the version file. 
              
              Omitting the name is equivalent to setting it to the name of the bundle's folder with `.mxf`
              appended, thereby creating the bundle's default version file.
            type: string
            required: false
            repeat: false
          master:
            description: |
              UUID identifier for the _master essence component file_ in the bundle. This value must be provided 
              and must be the identifier for the essence component file, not the rush identifier referenced from within 
              the file.
              
              The _master essence component file_ within a version is the one that provides the overall edit rate for 
              the version file and contains the timecode track that will be used as the output timecode track for the 
              version file.
            type: string
            pattern: "(urn:uuid:)?[0-9a-fA-f]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
            required: true
            repeat: false
          component:
            description: |
              Zero or more essence component files that are synchronous with the master component and being recorded at 
              the same time as part of this version. The master essence component file should not be repeated here. If only
              a single master essence component file exists for the version file, there is no need to list it here.
            type: string
            pattern: "(urn:uuid:)?[0-9a-fA-f]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
            repeat: true
        responses:
          400:
            body:
              application/xml:
                description: |
                  Problem creating the essence compomponent for reasons including:
                  
                  * Invalid query parameters;
                  * Conflicts with existing identifiers.
                schema: !include error.xsd     
      /default:
        displayName: Default Version File
        is: resourceNotFound
        description: |
          Access information about the default version file within the bundle. The default version is 
          a version file inside the AS-02 bundle with the same name as the folder and a `.mxf` file extension.          
        get: 
          is: as02FileDetails
          description: Retrieve bundle manifest details about the version file.
        delete:
          description: Delete default version file for the bundle.
          responses:
            204: # No content, so not defining a MIME type
              description: Default version file successfully deleted from the bundle.   
        /aaf-xml:
          is: resourceNotFound
          get:
            description: |
              Retrieve header information from the defauly version file in Reg-XML format, consisting of a serialization
              of all non-stream data contained in the `Preface` element of the MXF file. 
            responses:
              200:
                application/xml:
                  schema: !include ST2001-2b-2013.xsd
        /stream:
          is: resourceNotFound
          get:
            description: Streams that default version file as an MXF file as stored in the AS-02 bundle.
            responses:
              200:
                application/mxf:
                  description: MXF default version file.
          put:
            is: as02FileDetails
            description: Create or replace the default version file for the bundle.
            body:
              application/mxf:
                description: MXF file to upload as the new or replacement defuault version file.


           
      /{versionID}:
        displayName: Specific Version File
        is: resourceNotFound
        description: |
          Access information about the version file with the given <<versionID>>.
          
          The <<versionID>> may take two forms:
          
          * The UUID providing the identity of a version file, which is the version files primary package identifier.
          * The name of the version file with or wothout the `.mxf` file extension.
        get: 
          is: as02FileDetails
         
  /shim.xml:
    displayName: Shim File
/ping:
  displayName: Service Status Check
      
    